# .github/workflows/ci-cd.yml

name: CI/CD Build & Test

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-test:
    runs-on: ubuntu-latest
    name: Build & Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Debug info
        run: |
          echo "=== Node version ==="
          node --version
          echo "=== NPM version ==="
          npm --version
          echo "=== Available scripts ==="
          npm run
          echo "=== TypeScript version ==="
          npx tsc --version

      - name: TypeScript compilation check
        run: npx tsc --noEmit

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Run tests (optional)
        run: npm run test
        continue-on-error: true

  docker-deploy:
    needs: build-test
    runs-on: ubuntu-latest
    name: Docker Build & Deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker compose build

      - name: Test Docker Compose stack
        run: |
          docker compose up -d
          sleep 20
          curl --fail http://localhost:3000 || (docker compose logs app && exit 1)
          docker compose down

  docker-push:
    needs: docker-deploy
    runs-on: ubuntu-latest
    name: Push to GitHub Container Registry
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/pfe-backend:latest .
          docker push ghcr.io/${{ github.repository_owner }}/pfe-backend:latest
          
  # ðŸš¨ DÃ‰PLOIEMENT AZURE DÃ‰SACTIVÃ‰
  # Ce job est actuellement dÃ©sactivÃ© car il nÃ©cessite une configuration Azure spÃ©cifique
  # Pour l'activer, vous devez :
  # 1. Configurer une VM Azure avec Docker
  # 2. Ajouter les secrets GitHub (AZURE_VM_HOST, AZURE_VM_USERNAME, AZURE_VM_SSH_KEY)
  # 3. Configurer JWT_SECRET
  # 4. DÃ©commenter ce job et configurer les variables d'environnement
  #
  # Voir GITHUB_SECRETS_SETUP.md pour la configuration complÃ¨te
  #
  # deploy-to-azure:
  #   needs: docker-push
  #   runs-on: ubuntu-latest
  #   name: Deploy to Azure VM
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Create .env file for production
  #       run: |
  #         cat > .env << EOF
  #         NODE_ENV=production
  #         PORT=3000
          
  #         # Base de donnÃ©es PostgreSQL
  #         DATABASE_URL=postgresql://postgres:postgres@postgres:5432/pfe_db
  #         POSTGRES_USER=postgres
  #         POSTGRES_PASSWORD=postgres
  #         POSTGRES_DB=pfe_db
          
  #         # RabbitMQ
  #         RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
  #         RABBITMQ_USER=guest
  #         RABBITMQ_PASSWORD=guest
          
  #         # InfluxDB
  #         INFLUXDB_URL=http://influxdb:8086
  #         INFLUXDB_TOKEN=adminpassword
  #         INFLUXDB_ORG=pfe_org
  #         INFLUXDB_BUCKET=pfe_bucket
  #         INFLUXDB_USERNAME=admin
  #         INFLUXDB_PASSWORD=adminpassword
          
  #         # JWT Secret (gÃ©nÃ©rÃ© automatiquement)
  #         JWT_SECRET=${{ secrets.JWT_SECRET }}
          
  #         # GitHub Container Registry
  #         GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }}
  #         EOF

      # - name: Copy files to Azure VM
      #   uses: appleboy/scp-action@v0.1.7
      #   with:
      #     host: ${{ secrets.AZURE_VM_HOST }}
      #     username: ${{ secrets.AZURE_VM_USERNAME }}
      #     key: ${{ secrets.AZURE_VM_SSH_KEY }}
      #     source: "docker-compose.prod.yml,.env"
      #     target: "/opt/pfe-backend"

      # - name: Deploy to Azure VM
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.AZURE_VM_HOST }}
      #     username: ${{ secrets.AZURE_VM_USERNAME }}
      #     key: ${{ secrets.AZURE_VM_SSH_KEY }}
      #     script: |
      #       cd /opt/pfe-backend
      #       docker-compose -f docker-compose.prod.yml down
      #       docker pull ghcr.io/${{ github.repository_owner }}/pfe-backend:latest
      #       docker-compose -f docker-compose.prod.yml up -d
      #       sleep 30
      #       curl -f http://localhost:3000 || (docker-compose -f docker-compose.prod.yml logs app && exit 1)
      #       echo "Deployment completed successfully!"

